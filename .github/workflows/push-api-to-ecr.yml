name: Push the Docker image to AWS ECR Repo
on:
  push:
    branches:
      - production
jobs:
  Build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # - name: Build, tag, and push the image to Amazon ECR
      #   id: build-image
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: ${{ secrets.API_REPO_NAME }}
      #     IMAGE_TAG: latest
      #   run: |
      #     cd apps/api
      #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Fetching image IDs
        id: list-images
        run: |
          IMAGES=$(aws ecr list-images --repository-name ${{ secrets.API_REPO_NAME }} --filter tagStatus=TAGGED --query 'imageIds[?imageTag==`-`].[imageDigest]' --output text)
          echo "::set-output name=images::$IMAGES"

      - name: Deleting older images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.API_REPO_NAME }}
          IMAGES: ${{ steps.list-images.outputs.images }}
        # run: |
        #   aws ecr batch-delete-image --repository-name $ECR_REPOSITORY --image-ids imageTag=latest
        run: |
          for IMAGE in $IMAGES; do
            aws ecr batch-delete-image --repository-name $ECR_REPOSITORY --image-ids imageDigest=$IMAGE
          done
